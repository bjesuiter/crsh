* TODO Better error handling (don't crash ever)
* TODO Support multiline
* TODO Alt + Left / Right
* TODO Fancier globs
e.g.

~/Documents/projects/deno_shell $ ls **/*.test.*
tests/util/evalAndInterpolateJS.test.js   tests/util/mergeArgsBetweenQuotes.test.js tests/util/replaceEnvVars.test.js

Also tilde:

$ ls ~/*.js
home.js
$

* Everything above this line is for feature parity with existing shells

And other fun stuff
* TODO Source a file
Define a JS/unix hybrid. Something like this:
"Any statement that doesn't end in a semi colon should be executed as a unix command.
Any other statement should be eval'd in Deno."

And if I start a new scope, a newline should not yet execute the command, and should write some fancy bit to the prompt instead

* TODO Persist history
* TODO Fuzzyfinder
* TODO Make the indent area a beautiful auto-generated pattern
* TODO Surface JS syntax errors while writing
* TODO Shortcut to re-run current JS snippet with previous output and show result
* TODO Async reader triggering of custom functions
This would be extra good combined with reading files as input
* TODO Improve builtin, function definitions
* TODO Let the user write functions that span multiple lines

* TODO Manage resources/resource IDs.

Do this in a more Deno way than bash way. Think of resources over file descriptors.

** Maybe a more readable way too.

Always left to right?

Cases: stdout, in, err, files

* TODO Background jobs

* TODO Add tests
* TODO Use typescript
* TODO Refactor to pull out reuseable parts
** Cursor movement and other termy, curses type stuff
** Make them available as hosted deno modules (on git?)
Like can you just have them on git and reference them in deno?


* Learnings

** VT100 codes
** Non-canonical input
** Piping stdin + stdout
** File descriptors. Abstractions make this a little difficult. Can feed these difficulties back into the Deno project?
** OS Signals

** resources
https://catonmat.net/bash-one-liners-explained-part-three#:~:text=When%20bash%20starts%20it%20opens,them%20and%20read%20from%20them.